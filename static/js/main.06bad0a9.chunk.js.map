{"version":3,"sources":["component/card.js","component/cardList.js","component/searchBox.js","component/scroll.js","component/errorBoundaries.js","containers/app.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","cardArray","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","children","ErrorBoundaries","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filtredrobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"iVAWeA,G,MATF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,GACxB,OACE,yBAAKC,UAAU,QACb,yBAAKC,IAAG,+BAA0BF,EAA1B,iBAA6CG,IAAI,UACzD,4BAAKL,GACL,2BAAIC,MCIKK,G,MARE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACZC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GAClC,OACE,kBAAC,EAAD,CAAMX,KAAMO,EAAOI,GAAGX,KAAMC,MAAOM,EAAOI,GAAGV,MAAOC,GAAIK,EAAOI,GAAGT,GAAIU,IAAKL,EAAOI,GAAGT,QAGzF,OAAO,yBAAKC,UAAU,YAAYK,KCArBK,G,MAPG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,6BACI,2BAAOC,KAAO,SAASC,YAAY,SAASC,SAAUH,OCInDI,G,YAPA,SAACC,GACZ,OACI,yBAAKhB,UAAU,UACVgB,EAAMC,YCaJC,E,kDAfX,WAAYF,GAAO,IAAD,8BACd,cAAMA,IACDG,MAAQ,CACTC,UAAW,GAHD,E,8DAMAC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAGxB,OAAGG,KAAKJ,MAAMC,SAAiB,qEACxBG,KAAKP,MAAMC,a,GAZIQ,aCwCfC,E,kDAnCb,aAAe,IAAD,8BACZ,gBAMFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAN1C,EAAKZ,MAAQ,CACXU,YAAa,GACbzB,OAAQ,IAJE,E,gEAUO,IAAD,OAClB4B,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKZ,SAAS,CAAEpB,OAAQgC,S,+BAEnC,IAAD,EACyBb,KAAKJ,MAA7Bf,EADD,EACCA,OAAQyB,EADT,EACSA,YACVQ,EAAgBjC,EAAOkC,QAAO,SAACC,GACnC,OAAOA,EAAM1C,KAAK2C,cAAcC,SAASZ,EAAYW,kBAEvD,OAAQpC,EAAOsC,OAGb,6BACE,uDACA,kBAAC,EAAD,CAAW/B,aAAcY,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUvB,OAAQiC,OAPxB,2C,GAtBYZ,aCMEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACT,kBAAC,EAAD,MACEC,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,c","file":"static/js/main.06bad0a9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './card.css'\r\nconst Card = ({name,email,id}) => {\r\n  return (\r\n    <div className='card'>\r\n      <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robot\" />\r\n      <h2>{name}</h2>\r\n      <p>{email}</p>\r\n    </div>\r\n  );\r\n};\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./card\";\r\nimport './cardList.css'\r\nconst CardList = ({ robots }) => {\r\n  const cardArray = robots.map((user, i) => {\r\n    return (\r\n      <Card name={robots[i].name} email={robots[i].email} id={robots[i].id} key={robots[i].id} />\r\n    );\r\n  });\r\n  return <div className='allcards'>{cardArray}</div>;\r\n};\r\nexport default CardList;\r\n","import React from 'react';\r\nimport './searchBox.css'\r\nconst SearchBox = ({searchChange}) => {\r\n    return(\r\n        <div>\r\n            <input type = 'search' placeholder='Search' onChange={searchChange}/>\r\n        </div>\r\n    )\r\n}\r\nexport default SearchBox;","import React from 'react';\r\nimport './scroll.css'\r\nconst Scroll = (props) =>{\r\n    return(\r\n        <div className=\"scroll\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\nexport default Scroll;","import React,{ Component } from \"react\";\r\n\r\nclass ErrorBoundaries extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            hasError : false,\r\n        }\r\n    }\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true})\r\n    }\r\n    render(){\r\n        if(this.state.hasError){return <h1>There is an issue with this component</h1>};\r\n        return this.props.children\r\n    }\r\n\r\n}\r\nexport default ErrorBoundaries;","import React, { Component } from \"react\";\r\nimport CardList from \"../component/cardList.js\";\r\nimport SearchBox from \"../component/searchBox\";\r\nimport \"./app.css\";\r\nimport Scroll from \"../component/scroll\";\r\nimport ErrorBoundaries from '../component/errorBoundaries'\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      searchField: \"\",\r\n      robots: [],\r\n    };\r\n  }\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchField: event.target.value });\r\n  };\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((response) => response.json())\r\n      .then((users) => this.setState({ robots: users }));\r\n  }\r\n  render() {\r\n    const { robots, searchField } = this.state;\r\n    const filtredrobots = robots.filter((robot) => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    return !robots.length ? (\r\n      <h1>Loading</h1>\r\n    ) : (\r\n      <div>\r\n        <h1>RobotFriends for Monica</h1>\r\n        <SearchBox searchChange={this.onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundaries>\r\n            <CardList robots={filtredrobots} />\r\n          </ErrorBoundaries>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/app';\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nReactDOM.render(\r\n<App/>,\r\n  document.getElementById('root')\r\n);\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}